const StyleIssueDescription = {
  "Incorrect indentation":
    "Maintain consistent indentation throughout your code to align with the project's coding conventions. Proper indentation improves readability and helps in understanding the code structure.",
  "Class or":
    "In Java, it's standard practice to start class and interface names with an uppercase letter. This approach enhances readability and clarity by clearly distinguishing classes and interfaces from other elements like methods and variables, which usually begin with lowercase letters. Adhering to this convention aligns with industry standards and facilitates easier understanding and maintenance of the code, making it a fundamental aspect of Java coding best practices.",
  "Method name":
    "In Java, the convention of starting method names with a lowercase letter is a fundamental aspect of the language's coding style. This practice, part of the camelCase naming convention, ensures clear differentiation between method names and other entities such as classes or interfaces, which start with uppercase letters. By beginning method names with a lowercase letter, Java developers can quickly identify methods within code, enhancing readability and maintainability. This naming standard also aids in creating a more intuitive and organized code structure, where the distinct roles of classes, methods, and variables are easily recognizable, contributing to better code clarity and consistency across Java projects.",
  "Magic number":
    "In Java, magic numbers refer to hard-coded, unexplained numeric values directly used in code, leading to several issues. They obscure the meaning and purpose of the number, making the code less readable and understandable. Maintenance becomes challenging and error-prone, as changes to a repeated magic number require manual updates in multiple places. This also reduces the code's flexibility to adapt to changes. Furthermore, magic numbers complicate debugging and testing due to their lack of context. To address these problems, best practices recommend replacing magic numbers with named constants, which clarifies their meaning, simplifies maintenance, and enhances the overall quality and readability of the code.",
  "Opening brace":
    "In Java, the convention of placing opening braces on the same line as the declaration, known as the 'end-of-line' brace style, is widely adopted for its benefits in enhancing code readability and consistency. This approach not only conserves vertical space, allowing more code to be visible at once, but also clearly delineates the beginning of code blocks, such as classes, methods, or control structures, making the code structure more apparent at a glance. By aligning with established Java coding standards, this practice facilitates easier code comprehension and maintenance, and helps in reducing syntax errors. Adhering to this style ensures that code conforms to the norms of the Java development community, promoting uniformity and efficiency in coding practices.",
  "Import Organisation":
    "organizing imports alphabetically is a simple yet effective practice to enhance code readability, ease maintenance, ensure consistency across a codebase, reduce merge conflicts in team environments, and assist in quickly identifying unnecessary imports.",
  "Constant variable":
    "naming constant variables in uppercase in Java is a best practice that aids in clearly identifying immutable values, ensures consistency and readability, helps prevent errors, and aligns with standard industry practices.",
  "Variable name":
    "In Java, adopting camelCase for variable naming is a best practice primarily due to its readability, where the initial lowercase letter and subsequent capitalization of words make multi-word variable names clear and legible. This convention ensures consistency with widespread industry standards, helping maintain uniformity across various codebases and enhancing the code's comprehensibility for other developers. Additionally, camelCase effectively differentiates variable names from other identifiers, like class names (which use PascalCase) and constants (which are typically uppercase), contributing to an organized and understandable code structure. Given that programming languages don't permit spaces in variable names, camelCase offers a seamless way to denote multi-word identifiers, adhering to the syntactic rules while maintaining meaningful naming.",
  "Local variable":
    "In Java, adopting camelCase for variable naming is a best practice primarily due to its readability, where the initial lowercase letter and subsequent capitalization of words make multi-word variable names clear and legible. This convention ensures consistency with widespread industry standards, helping maintain uniformity across various codebases and enhancing the code's comprehensibility for other developers. Additionally, camelCase effectively differentiates variable names from other identifiers, like class names (which use PascalCase) and constants (which are typically uppercase), contributing to an organized and understandable code structure. Given that programming languages don't permit spaces in variable names, camelCase offers a seamless way to denote multi-word identifiers, adhering to the syntactic rules while maintaining meaningful naming.",
};

export default StyleIssueDescription;
